SAND: Towards High-Performance Serverless Computing
https://www.usenix.org/conference/atc18/presentation/akkus
[4*]

Key problem is that in serverless each function is executed in its
independent container. This creates problem for :
Concurrency: when (i) using a cold container that has a large
start-up time; (ii) warm container that might consume resources.
Interaction: there is no difference between a functions from
a same application and inter-application functions. Every message,
notification goes through the global message bus.

They propose to to use two-level of isolation mechanism to
differentiate between intra and inter-application functions.
They use fork from a "worker" process for the first one to
decrease the start-up latency (shared lib, pre-loaded code, etc).
They can use containers, VMs, LightVM, unikernels, light-weight
contexts, threads to provide this isolation. They also propose
a two-level hierarchical bus to deliver local and global messages.

Related work on serverless start-up time and isolation mechanisms,
and what framework and languge they suppport.

Follow up: what is the performance of Kafka and what message type
patterns they have? Small and large message distribution? vs using
a control bus overall. Microsecond-scale serverless service? in
OpenWhisk or GreenGrass (these we can install and execute locally).
------------------------------------------------------------------------------

SOCK: Rapid Task Provisioning with Serverless-Optimized Containers
https://www.usenix.org/conference/atc18/presentation/oakes
[]

Three advantages of serverless - programming at an high-abstraction level,
reusing libraries, and decomposing applications into auto-scaling serverless
lambdas. So, they focus on providing a special purpose "isolation" mechanism
aiming to provide (i) low-latency invocation for Python that import libraries
because loading libraries is a costly operation and there are many of them;
(ii) efficient sandbox initiailzation for high steady-state startup throughput.
They deploy SOCK in OpenLambda replacing docker containers.
... 

